#!/usr/bin/python

import matplotlib
matplotlib.use('PDF')
matplotlib.interactive(False)

from optparse import OptionParser
from map_utils import *
import tables as tb
import numpy as np
import os, imp, sys

from pylab import csv2rec

# run /Users/anand/renearch/map_utils/validate cov_test test_db 500 test_data.csv -t 1

# Create option parser
req_doc = """


  module                The module from which maps are to be generated.
  database-file         The name of the database file produced by the mcmc.
  burn                  The number of initial MCMC iterations to discard. 
  pred-pts              A csv file containing the lon, lat, (time,) and 
                        associated covariate values where you want to predict.
                        
                        NOTE: time must be in units of DECIMAL YEARS SINCE
                        2009. That means it will usually be negative. That
                        is OK.
                        
"""

p = OptionParser('usage: %prog module database-file burn pred-pts [options]' + req_doc)
p.add_option('-t','--thin',help='How much to thin the MCMC trace. Defaults to 1, meaning no thinning. This is recommended unless it takes too long.',dest='thin',type='int')
p.add_option('-i','--iter',help='The total number of samples to use in generating the map. Defaults to 20000',dest='total',type='int')

p.set_defaults(thin=1)
p.set_defaults(total=20000)


(o, args) = p.parse_args()
if len(args) != 4:
    raise ValueError, 'You must supply exactly four positional arguments. You supplied %i.'%len(args)

o.module, o.hf_name, o.burn, o.pred_input = args
o.burn = int(o.burn)
    

# Load up given module and load its relevant contents

mod_path, mod_name = os.path.split(o.module)
mod_basename, mod_ext = os.path.splitext(mod_name)
mod_search_path = [mod_path, os.getcwd()] + sys.path
mod = imp.load_module(mod_basename, *imp.find_module(mod_basename, mod_search_path))

for n in ['f_name', 'nugget_name', 'f_has_nugget', 'postproc','x_name']:
    try:
        exec("%s=getattr(mod,'%s')"%(n,n))
    except:
        cls,inst,tb = sys.exc_info()
        new_inst = cls('Could not import %s from %s. Tell Anand. Original error message:\n\n\t%s'%(n,mod_name,inst.message))
        raise cls,new_inst,tb


# Parse input file

input = csv2rec(o.pred_input)
lon = maybe_convert(input, 'lon', 'float')
lat = maybe_convert(input, 'lat', 'float')
if hasattr(input, 't'):
    t = maybe_convert(input, 't', 'float')
    x = combine_st_inputs(lon,lat,t)
else:
    x = combine_spatial_inputs(lon,lat)
pos = maybe_convert(input, 'pos', 'float')
neg = maybe_convert(input, 'neg', 'float')

covariate_dict = {}
for n in input.dtype.names:
    if n not in ['lon','lat','pos','neg']:
        covariate_dict[n]=maybe_convert(input, n, 'float')


# Create predictive locations and open hdf5 archive

hf = tb.openFile(o.hf_name)
ch = hf.root.chain0
meta = hf.root.metadata


# Create predictive samples

samples = hdf5_to_samps(ch,meta,x,o.burn,o.thin,o.total,[sample_reduce],f_name, f_has_nugget,x_name,covariate_dict,nugget_name,postproc,sample_finalize)


# Write out

hf_path, hf_basename  = os.path.split(o.hf_name)
base_outname = mod_basename + '-' + os.path.splitext(hf_basename)[0]
out_name = os.path.join(hf_path, base_outname + '-houldout-samps.csv')
samples.tofile(out_name,sep=',')